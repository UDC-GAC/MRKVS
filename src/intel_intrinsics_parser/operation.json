[
{ name: '_mm256_blend_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_blend_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_blendv_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_blendv_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_shuffle_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'ConditionalExpression',
                test:
                 { type: 'BinaryExpression',
                   operator: '==',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'imm8' },
                      property: { type: 'Literal', value: 0 },
                      computed: true },
                   right: { type: 'Literal', value: 0 } },
                consequent:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                alternate:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'ConditionalExpression',
                test:
                 { type: 'BinaryExpression',
                   operator: '==',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'imm8' },
                      property: { type: 'Literal', value: 1 },
                      computed: true },
                   right: { type: 'Literal', value: 0 } },
                consequent:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'b' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                alternate:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'b' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'ConditionalExpression',
                test:
                 { type: 'BinaryExpression',
                   operator: '==',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'imm8' },
                      property: { type: 'Literal', value: 2 },
                      computed: true },
                   right: { type: 'Literal', value: 0 } },
                consequent:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true },
                alternate:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'ConditionalExpression',
                test:
                 { type: 'BinaryExpression',
                   operator: '==',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'imm8' },
                      property: { type: 'Literal', value: 3 },
                      computed: true },
                   right: { type: 'Literal', value: 0 } },
                consequent:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'b' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true },
                alternate:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'b' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_shuffle_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 159 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 160 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 223 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 224 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_extractf128_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_extractf128_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_extractf128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_extract_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 255 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'index' },
                         range:
                          { start: { type: 'Literal', value: 2 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 32 } } },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_extract_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 255 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'index' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 64 } } },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_permutevar_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 33 },
                        end: { type: 'Literal', value: 32 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 65 },
                        end: { type: 'Literal', value: 64 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 97 },
                        end: { type: 'Literal', value: 96 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 159 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 129 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 160 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 161 },
                        end: { type: 'Literal', value: 160 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 223 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 193 },
                        end: { type: 'Literal', value: 192 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 224 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 225 },
                        end: { type: 'Literal', value: 224 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_permutevar_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 33 },
                        end: { type: 'Literal', value: 32 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 65 },
                        end: { type: 'Literal', value: 64 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 97 },
                        end: { type: 'Literal', value: 96 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 159 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 160 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 223 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 224 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_permute_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permutevar_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 65 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 65 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 129 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 129 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 193 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 193 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true } } },
          alternate: null },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_permutevar_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 65 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                property: { type: 'Literal', value: 65 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 0 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 0 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 2 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 2 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 3 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 191 },
                      end: { type: 'Literal', value: 128 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 3 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 255 },
                      end: { type: 'Literal', value: 192 } },
                   computed: true } } },
          alternate: null },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_permute_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 0 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 0 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 0 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 63 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true } } },
          alternate: null },
        { type: 'IfStatement',
          test:
           { type: 'BinaryExpression',
             operator: '==',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'imm8' },
                property: { type: 'Literal', value: 1 },
                computed: true },
             right: { type: 'Literal', value: 1 } },
          consequent:
           { type: 'ExpressionStatement',
             expression:
              { type: 'AssignmentExpression',
                operator: ':=',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'dst' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true },
                right:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'a' },
                   range:
                    { start: { type: 'Literal', value: 127 },
                      end: { type: 'Literal', value: 64 } },
                   computed: true } } },
          alternate: null },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute2f128_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } } ] },
                { type: 'IfStatement',
                  test:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     property: { type: 'Literal', value: 3 },
                     computed: true },
                  consequent:
                   [ { type: 'ExpressionStatement',
                       expression:
                        { type: 'AssignmentExpression',
                          operator: ':=',
                          left:
                           { type: 'MemberExpression',
                             object: { type: 'Identifier', name: 'tmp' },
                             range:
                              { start: { type: 'Literal', value: 127 },
                                end: { type: 'Literal', value: 0 } },
                             computed: true },
                          right: { type: 'Literal', value: 0 } } } ],
                  alternate: null },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute2f128_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } } ] },
                { type: 'IfStatement',
                  test:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     property: { type: 'Literal', value: 3 },
                     computed: true },
                  consequent:
                   [ { type: 'ExpressionStatement',
                       expression:
                        { type: 'AssignmentExpression',
                          operator: ':=',
                          left:
                           { type: 'MemberExpression',
                             object: { type: 'Identifier', name: 'tmp' },
                             range:
                              { start: { type: 'Literal', value: 127 },
                                end: { type: 'Literal', value: 0 } },
                             computed: true },
                          right: { type: 'Literal', value: 0 } } } ],
                  alternate: null },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute2f128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } } ] },
                { type: 'IfStatement',
                  test:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     property: { type: 'Literal', value: 3 },
                     computed: true },
                  consequent:
                   [ { type: 'ExpressionStatement',
                       expression:
                        { type: 'AssignmentExpression',
                          operator: ':=',
                          left:
                           { type: 'MemberExpression',
                             object: { type: 'Identifier', name: 'tmp' },
                             range:
                              { start: { type: 'Literal', value: 127 },
                                end: { type: 'Literal', value: 0 } },
                             computed: true },
                          right: { type: 'Literal', value: 0 } } } ],
                  alternate: null },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcast_ss',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'tmp' },
                       range:
                        { start: { type: 'Literal', value: 31 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcast_ss',
  category: [ 'Load', 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'tmp' },
                       range:
                        { start: { type: 'Literal', value: 31 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcast_sd',
  category: [ 'Load', 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'tmp' },
                       range:
                        { start: { type: 'Literal', value: 63 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcast_ps',
  category: [ 'Load', 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcast_pd',
  category: [ 'Load', 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_insertf128_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_insertf128_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_insertf128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_insert_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'index' },
                   range:
                    { start: { type: 'Literal', value: 4 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 8 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 7 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 7 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_insert_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'index' },
                   range:
                    { start: { type: 'Literal', value: 3 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 16 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 15 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_insert_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'index' },
                   range:
                    { start: { type: 'Literal', value: 2 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 32 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_insert_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'index' },
                   range:
                    { start: { type: 'Literal', value: 1 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 64 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 63 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_load_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_load_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_loadu_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_loadu_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_load_si256',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_loadu_si256',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_maskload_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 63 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_maskload_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 63 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_maskload_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 31 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_maskload_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 31 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_lddqu_si256',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpackhi_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_QWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpackhi_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpacklo_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_QWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpacklo_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_loadu2_m128',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'loaddr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'loaddr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'hiaddr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'hiaddr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_loadu2_m128d',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'loaddr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'loaddr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'hiaddr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'hiaddr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_loadu2_m128i',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'loaddr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'loaddr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'hiaddr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'hiaddr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_extract_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 7 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 255 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'index' },
                         range:
                          { start: { type: 'Literal', value: 4 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 8 } } },
                range:
                 { start: { type: 'Literal', value: 7 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_extract_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 255 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'index' },
                         range:
                          { start: { type: 'Literal', value: 3 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm256_blend_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 15 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 16 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '%',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_blend_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_blend_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_blendv_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 31 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 7 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastb_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 15 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 7 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 7 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastb_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 31 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 7 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 7 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastd_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 31 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastd_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 31 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastq_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 63 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastq_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 63 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastsd_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 63 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastsd_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 63 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastsi128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastsi128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastss_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 31 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastss_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 31 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_broadcastw_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 16 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 15 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 15 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_broadcastw_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 15 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 16 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 15 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start: { type: 'Literal', value: 15 },
                          end: { type: 'Literal', value: 0 } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_extracti128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'a' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i32gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i32gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i32gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i32gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i32gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i32gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i32gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i32gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'SignExtend64' },
                                arguments:
                                 [ { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 31 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true } ] },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i64gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i64gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i64gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i64gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i64gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i64gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_i64gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_i64gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'addr' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'base_addr' },
                       right:
                        { type: 'BinaryExpression',
                          operator: '*',
                          left:
                           { type: 'BinaryExpression',
                             operator: '*',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'vindex' },
                                range:
                                 { start:
                                    { type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'm' },
                                      right: { type: 'Literal', value: 63 } },
                                   end: { type: 'Identifier', name: 'm' } },
                                computed: true },
                             right:
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                          right: { type: 'Literal', value: 8 } } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'MEM' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'addr' },
                             right: { type: 'Literal', value: 63 } },
                          end: { type: 'Identifier', name: 'addr' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_inserti128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             property: { type: 'Literal', value: 0 },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 255 },
                           end: { type: 'Literal', value: 128 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } } ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i32gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i32gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i32gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i32gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i32gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i32gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i32gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i32gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'SignExtend64' },
                                     arguments:
                                      [ { type: 'MemberExpression',
                                          object: { type: 'Identifier', name: 'vindex' },
                                          range:
                                           { start:
                                              { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Identifier', name: 'm' },
                                                right: { type: 'Literal', value: 31 } },
                                             end: { type: 'Identifier', name: 'm' } },
                                          computed: true } ] },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i64gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i64gather_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i64gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i64gather_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i64gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i64gather_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_mask_i64gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_mask_i64gather_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'm' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left: { type: 'Identifier', name: 'addr' },
                         right:
                          { type: 'BinaryExpression',
                            operator: '+',
                            left: { type: 'Identifier', name: 'base_addr' },
                            right:
                             { type: 'BinaryExpression',
                               operator: '*',
                               left:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left:
                                   { type: 'MemberExpression',
                                     object: { type: 'Identifier', name: 'vindex' },
                                     range:
                                      { start:
                                         { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Identifier', name: 'm' },
                                           right: { type: 'Literal', value: 63 } },
                                        end: { type: 'Identifier', name: 'm' } },
                                     computed: true },
                                  right:
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'ZeroExtend64' },
                                     arguments: [ { type: 'Identifier', name: 'scale' } ] } },
                               right: { type: 'Literal', value: 8 } } } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'addr' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'addr' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'src' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'mask' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_maskload_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 31 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_maskload_epi32',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 31 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_maskload_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 63 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_maskload_epi64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'MEM' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Identifier', name: 'mem_addr' },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 63 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'mem_addr' },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute2x128_si256',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src1' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src2' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } } ] },
                { type: 'IfStatement',
                  test:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     property: { type: 'Literal', value: 3 },
                     computed: true },
                  consequent:
                   [ { type: 'ExpressionStatement',
                       expression:
                        { type: 'AssignmentExpression',
                          operator: ':=',
                          left:
                           { type: 'MemberExpression',
                             object: { type: 'Identifier', name: 'tmp' },
                             range:
                              { start: { type: 'Literal', value: 127 },
                                end: { type: 'Literal', value: 0 } },
                             computed: true },
                          right: { type: 'Literal', value: 0 } } } ],
                  alternate: null },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute4x64_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 191 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 192 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permute4x64_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 191 },
                                   end: { type: 'Literal', value: 128 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 255 },
                                   end: { type: 'Literal', value: 192 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permutevar8x32_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'id' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left:
                        { type: 'MemberExpression',
                          object: { type: 'Identifier', name: 'idx' },
                          range:
                           { start:
                              { type: 'BinaryExpression',
                                operator: '+',
                                left: { type: 'Identifier', name: 'i' },
                                right: { type: 'Literal', value: 2 } },
                             end: { type: 'Identifier', name: 'i' } },
                          computed: true },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'id' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'id' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_permutevar8x32_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'id' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left:
                        { type: 'MemberExpression',
                          object: { type: 'Identifier', name: 'idx' },
                          range:
                           { start:
                              { type: 'BinaryExpression',
                                operator: '+',
                                left: { type: 'Identifier', name: 'i' },
                                right: { type: 'Literal', value: 2 } },
                             end: { type: 'Identifier', name: 'i' } },
                          computed: true },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'dst' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'i' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'i' } },
                       computed: true },
                    right:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'a' },
                       range:
                        { start:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Identifier', name: 'id' },
                             right: { type: 'Literal', value: 31 } },
                          end: { type: 'Identifier', name: 'id' } },
                       computed: true } } } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_shuffle_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 159 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 160 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 223 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 224 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_shuffle_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 15 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'BinaryExpression',
                    operator: '==',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'b' },
                       property:
                        { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'i' },
                          right: { type: 'Literal', value: 7 } },
                       computed: true },
                    right: { type: 'Literal', value: 1 } },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'index' },
                            range:
                             { start: { type: 'Literal', value: 3 },
                               end: { type: 'Literal', value: 0 } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 3 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '*',
                                     left: { type: 'Identifier', name: 'index' },
                                     right: { type: 'Literal', value: 8 } },
                                  right: { type: 'Literal', value: 7 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left: { type: 'Identifier', name: 'index' },
                                  right: { type: 'Literal', value: 8 } } },
                            computed: true } } } ] },
               { type: 'IfStatement',
                 test:
                  { type: 'BinaryExpression',
                    operator: '==',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'b' },
                       property:
                        { type: 'BinaryExpression',
                          operator: '+',
                          left:
                           { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Literal', value: 128 },
                             right: { type: 'Identifier', name: 'i' } },
                          right: { type: 'Literal', value: 7 } },
                       computed: true },
                    right: { type: 'Literal', value: 1 } },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: 128 },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 7 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: 128 },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'index' },
                            range:
                             { start: { type: 'Literal', value: 3 },
                               end: { type: 'Literal', value: 0 } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: 128 },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 3 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: 128 },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: 128 },
                                     right: { type: 'Identifier', name: 'i' } },
                                  right: { type: 'Literal', value: 7 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: 128 },
                                  right: { type: 'Identifier', name: 'i' } } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: 128 },
                                     right:
                                      { type: 'BinaryExpression',
                                        operator: '*',
                                        left: { type: 'Identifier', name: 'index' },
                                        right: { type: 'Literal', value: 8 } } },
                                  right: { type: 'Literal', value: 7 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: 128 },
                                  right:
                                   { type: 'BinaryExpression',
                                     operator: '*',
                                     left: { type: 'Identifier', name: 'index' },
                                     right: { type: 'Literal', value: 8 } } } },
                            computed: true } } } ] } ],
             [] ] },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_shufflehi_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 79 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 79 },
                   end: { type: 'Literal', value: 64 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 80 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 3 },
                            end: { type: 'Literal', value: 2 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 79 },
                   end: { type: 'Literal', value: 64 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 111 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 5 },
                            end: { type: 'Literal', value: 4 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 79 },
                   end: { type: 'Literal', value: 64 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 112 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 7 },
                            end: { type: 'Literal', value: 6 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 79 },
                   end: { type: 'Literal', value: 64 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 128 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 207 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 207 },
                   end: { type: 'Literal', value: 192 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 223 },
                   end: { type: 'Literal', value: 208 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 3 },
                            end: { type: 'Literal', value: 2 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 207 },
                   end: { type: 'Literal', value: 192 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 239 },
                   end: { type: 'Literal', value: 224 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 5 },
                            end: { type: 'Literal', value: 4 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 207 },
                   end: { type: 'Literal', value: 192 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 240 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 7 },
                            end: { type: 'Literal', value: 6 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 207 },
                   end: { type: 'Literal', value: 192 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_shufflelo_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 16 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 3 },
                            end: { type: 'Literal', value: 2 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 47 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 5 },
                            end: { type: 'Literal', value: 4 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 48 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 7 },
                            end: { type: 'Literal', value: 6 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 64 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 143 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 143 },
                   end: { type: 'Literal', value: 128 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 159 },
                   end: { type: 'Literal', value: 144 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 3 },
                            end: { type: 'Literal', value: 2 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 143 },
                   end: { type: 'Literal', value: 128 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 175 },
                   end: { type: 'Literal', value: 160 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 5 },
                            end: { type: 'Literal', value: 4 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 143 },
                   end: { type: 'Literal', value: 128 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 191 },
                   end: { type: 'Literal', value: 176 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left: { type: 'Identifier', name: 'a' },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 7 },
                            end: { type: 'Literal', value: 6 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 143 },
                   end: { type: 'Literal', value: 128 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 192 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 192 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_stream_load_si256',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 255 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpackhi_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 71 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 71 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 72 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 72 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 87 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 87 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 88 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 88 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 71 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 103 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 72 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 103 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 87 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 104 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 88 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 104 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 103 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 119 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 104 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 119 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 119 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 120 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 120 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 120 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpackhi_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpackhi_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpackhi_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_QWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpacklo_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 71 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 72 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 87 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 88 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 103 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 104 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 119 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 120 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpacklo_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 79 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 80 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 111 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 112 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpacklo_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm256_unpacklo_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_QWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 255 },
                   end: { type: 'Literal', value: 128 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_QWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 255 },
                        end: { type: 'Literal', value: 128 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 256 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_m_punpckhbw',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_m_punpckhwd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_m_punpckhdq',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true } } } ] } }
,
{ name: '_m_punpcklbw',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_m_punpcklwd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_m_punpckldq',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_unpackhi_pi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_unpackhi_pi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_unpackhi_pi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true } } } ] } }
,
{ name: '_mm_unpacklo_pi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 7 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 8 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 39 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 40 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 23 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 55 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 56 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 24 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_BYTES' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_unpacklo_pi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 63 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 15 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 47 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 48 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 16 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_WORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_unpacklo_pi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'b' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_extract_pi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 63 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 16 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_m_pextrw',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 63 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 16 } } },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 16 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_insert_pi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'imm8' },
                   range:
                    { start: { type: 'Literal', value: 1 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 16 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 15 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_m_pinsrw',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'imm8' },
                   range:
                    { start: { type: 'Literal', value: 1 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 16 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 15 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_shuffle_pi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 16 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 47 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 48 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 15 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 16 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 47 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 48 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } } ] } }
,
{ name: '_m_pshufw',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 16 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 47 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 15 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 48 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 15 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 16 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 47 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 48 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 63 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_loadh_pi',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 32 } } },
                computed: true } } } ] } }
,
{ name: '_mm_loadl_pi',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 32 } } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true } } } ] } }
,
{ name: '_mm_load_ss',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_load1_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_load_ps1',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_load_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_loadu_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_loadr_ps',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 96 } } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 95 } },
                   end:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 64 } } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 32 } } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_shuffle_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'SELECT4' },
          params:
           [ { type: 'Parameter', name: { type: 'Identifier', name: 'src' } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'control' } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'CaseStatement',
                  discriminant:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'control' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                  cases:
                   [ { type: 'Case',
                       test: { type: 'Literal', value: 0 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 1 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 63 },
                                   end: { type: 'Literal', value: 32 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 2 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 95 },
                                   end: { type: 'Literal', value: 64 } },
                                computed: true } } } },
                     { type: 'Case',
                       test: { type: 'Literal', value: 3 },
                       consequent:
                        { type: 'ExpressionStatement',
                          expression:
                           { type: 'AssignmentExpression',
                             operator: ':=',
                             left:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'tmp' },
                                range:
                                 { start: { type: 'Literal', value: 31 },
                                   end: { type: 'Literal', value: 0 } },
                                computed: true },
                             right:
                              { type: 'MemberExpression',
                                object: { type: 'Identifier', name: 'src' },
                                range:
                                 { start: { type: 'Literal', value: 127 },
                                   end: { type: 'Literal', value: 96 } },
                                computed: true } } } } ] },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'tmp' },
                     range:
                      { start: { type: 'Literal', value: 31 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 1 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 32 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 3 },
                        end: { type: 'Literal', value: 2 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 95 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 5 },
                        end: { type: 'Literal', value: 4 } },
                     computed: true } ] } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 96 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'SELECT4' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'imm8' },
                     range:
                      { start: { type: 'Literal', value: 7 },
                        end: { type: 'Literal', value: 6 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_unpackhi_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_HIGH_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_unpacklo_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'FunctionDeclaration',
          id: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
          params:
           [ { type: 'Parameter',
               name: { type: 'Identifier', name: 'src1' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } },
             { type: 'Parameter',
               name: { type: 'Identifier', name: 'src2' },
               range:
                { start: { type: 'Literal', value: 127 },
                  end: { type: 'Literal', value: 0 } } } ],
          body:
           { type: 'BlockStatement',
             body:
              [ { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src1' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'dst' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'src2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } },
                { type: 'ReturnStatement',
                  argument:
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'dst' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } } ] } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'CallExpression',
                callee: { type: 'Identifier', name: 'INTERLEAVE_DWORDS' },
                arguments:
                 [ { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'a' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true },
                   { type: 'MemberExpression',
                     object: { type: 'Identifier', name: 'b' },
                     range:
                      { start: { type: 'Literal', value: 127 },
                        end: { type: 'Literal', value: 0 } },
                     computed: true } ] } } } ] } }
,
{ name: '_mm_loadu_si64',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_loadu_si16',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 15 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 15 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Identifier', name: 'MAX' },
                   end: { type: 'Literal', value: 16 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_lddqu_si128',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_loaddup_pd',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 64 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 63 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_blend_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_blend_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_blendv_pd',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 1 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 64 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 63 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 63 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_blendv_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 31 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_blendv_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 15 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'mask' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '+',
                       left: { type: 'Identifier', name: 'i' },
                       right: { type: 'Literal', value: 7 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_blend_epi16',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 16 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property: { type: 'Identifier', name: 'j' },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 15 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_extract_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 127 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 32 } } },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_extract_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 7 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 127 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 3 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 8 } } },
                range:
                 { start: { type: 'Literal', value: 7 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 8 } },
                computed: true },
             right: { type: 'Literal', value: 0 } } } ] } }
,
{ name: '_mm_extract_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 127 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         range:
                          { start: { type: 'Literal', value: 1 },
                            end: { type: 'Literal', value: 0 } },
                         computed: true },
                      right: { type: 'Literal', value: 32 } } },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_extract_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object:
                 { type: 'BinaryExpression',
                   operator: '>>',
                   left:
                    { type: 'MemberExpression',
                      object: { type: 'Identifier', name: 'a' },
                      range:
                       { start: { type: 'Literal', value: 127 },
                         end: { type: 'Literal', value: 0 } },
                      computed: true },
                   right:
                    { type: 'BinaryExpression',
                      operator: '*',
                      left:
                       { type: 'MemberExpression',
                         object: { type: 'Identifier', name: 'imm8' },
                         property: { type: 'Literal', value: 0 },
                         computed: true },
                      right: { type: 'Literal', value: 64 } } },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_insert_ps',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'tmp2' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             range:
              { start: { type: 'Literal', value: 7 },
                end: { type: 'Literal', value: 6 } },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 2 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 3 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'b' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true } } } } ] },
        { type: 'CaseStatement',
          discriminant:
           { type: 'MemberExpression',
             object: { type: 'Identifier', name: 'imm8' },
             range:
              { start: { type: 'Literal', value: 5 },
                end: { type: 'Literal', value: 4 } },
             computed: true },
          cases:
           [ { type: 'Case',
               test: { type: 'Literal', value: 0 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp2' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 1 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp2' },
                        range:
                         { start: { type: 'Literal', value: 63 },
                           end: { type: 'Literal', value: 32 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 2 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp2' },
                        range:
                         { start: { type: 'Literal', value: 95 },
                           end: { type: 'Literal', value: 64 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } },
             { type: 'Case',
               test: { type: 'Literal', value: 3 },
               consequent:
                { type: 'ExpressionStatement',
                  expression:
                   { type: 'AssignmentExpression',
                     operator: ':=',
                     left:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp2' },
                        range:
                         { start: { type: 'Literal', value: 127 },
                           end: { type: 'Literal', value: 96 } },
                        computed: true },
                     right:
                      { type: 'MemberExpression',
                        object: { type: 'Identifier', name: 'tmp1' },
                        range:
                         { start: { type: 'Literal', value: 31 },
                           end: { type: 'Literal', value: 0 } },
                        computed: true } } } } ] },
        { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 3 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 32 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'MemberExpression',
                    object: { type: 'Identifier', name: 'imm8' },
                    property:
                     { type: 'BinaryExpression',
                       operator: '%',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } },
                    computed: true },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'tmp2' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 31 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_insert_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'imm8' },
                   range:
                    { start: { type: 'Literal', value: 3 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 8 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 7 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 7 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_insert_epi32',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'imm8' },
                   range:
                    { start: { type: 'Literal', value: 1 },
                      end: { type: 'Literal', value: 0 } },
                   computed: true },
                right: { type: 'Literal', value: 32 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 31 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 31 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_insert_epi64',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'a' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left: { type: 'Identifier', name: 'sel' },
             right:
              { type: 'BinaryExpression',
                operator: '*',
                left:
                 { type: 'MemberExpression',
                   object: { type: 'Identifier', name: 'imm8' },
                   property: { type: 'Literal', value: 0 },
                   computed: true },
                right: { type: 'Literal', value: 64 } } } },
        { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sel' },
                      right: { type: 'Literal', value: 63 } },
                   end: { type: 'Identifier', name: 'sel' } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'i' },
                range:
                 { start: { type: 'Literal', value: 63 },
                   end: { type: 'Literal', value: 0 } },
                computed: true } } } ] } }
,
{ name: '_mm_stream_load_si128',
  category: [ 'Load' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ExpressionStatement',
          expression:
           { type: 'AssignmentExpression',
             operator: ':=',
             left:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'dst' },
                range:
                 { start: { type: 'Literal', value: 127 },
                   end: { type: 'Literal', value: 0 } },
                computed: true },
             right:
              { type: 'MemberExpression',
                object: { type: 'Identifier', name: 'MEM' },
                range:
                 { start:
                    { type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'mem_addr' },
                      right: { type: 'Literal', value: 127 } },
                   end: { type: 'Identifier', name: 'mem_addr' } },
                computed: true } } } ] } }
,
{ name: '_mm_shuffle_epi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 15 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'BinaryExpression',
                    operator: '==',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'b' },
                       property:
                        { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'i' },
                          right: { type: 'Literal', value: 7 } },
                       computed: true },
                    right: { type: 'Literal', value: 1 } },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'index' },
                            range:
                             { start: { type: 'Literal', value: 3 },
                               end: { type: 'Literal', value: 0 } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 3 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '*',
                                     left: { type: 'Identifier', name: 'index' },
                                     right: { type: 'Literal', value: 8 } },
                                  right: { type: 'Literal', value: 7 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left: { type: 'Identifier', name: 'index' },
                                  right: { type: 'Literal', value: 8 } } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
{ name: '_mm_shuffle_pi8',
  category: [ 'Swizzle' ],
  op:
   { type: 'Program',
     body:
      [ { type: 'ForStatement',
          init:
           [ { type: 'AssignmentExpression',
               operator: ':=',
               left: { type: 'Identifier', name: 'j' },
               right: { type: 'Literal', value: 0 } },
             [ ' ' ] ],
          varmax: { type: 'Literal', value: 7 },
          body:
           [ [ { type: 'ExpressionStatement',
                 expression:
                  { type: 'AssignmentExpression',
                    operator: ':=',
                    left: { type: 'Identifier', name: 'i' },
                    right:
                     { type: 'BinaryExpression',
                       operator: '*',
                       left: { type: 'Identifier', name: 'j' },
                       right: { type: 'Literal', value: 8 } } } },
               { type: 'IfStatement',
                 test:
                  { type: 'BinaryExpression',
                    operator: '==',
                    left:
                     { type: 'MemberExpression',
                       object: { type: 'Identifier', name: 'b' },
                       property:
                        { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'i' },
                          right: { type: 'Literal', value: 7 } },
                       computed: true },
                    right: { type: 'Literal', value: 1 } },
                 consequent:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right: { type: 'Literal', value: 0 } } } ],
                 alternate:
                  [ { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'index' },
                            range:
                             { start: { type: 'Literal', value: 2 },
                               end: { type: 'Literal', value: 0 } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'b' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 2 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true } } },
                    { type: 'ExpressionStatement',
                      expression:
                       { type: 'AssignmentExpression',
                         operator: ':=',
                         left:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'dst' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Identifier', name: 'i' },
                                  right: { type: 'Literal', value: 7 } },
                               end: { type: 'Identifier', name: 'i' } },
                            computed: true },
                         right:
                          { type: 'MemberExpression',
                            object: { type: 'Identifier', name: 'a' },
                            range:
                             { start:
                                { type: 'BinaryExpression',
                                  operator: '+',
                                  left:
                                   { type: 'BinaryExpression',
                                     operator: '*',
                                     left: { type: 'Identifier', name: 'index' },
                                     right: { type: 'Literal', value: 8 } },
                                  right: { type: 'Literal', value: 7 } },
                               end:
                                { type: 'BinaryExpression',
                                  operator: '*',
                                  left: { type: 'Identifier', name: 'index' },
                                  right: { type: 'Literal', value: 8 } } },
                            computed: true } } } ] } ],
             [] ] } ] } }
,
]
